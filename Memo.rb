class Memo < Post
  # Отдельный конструктор здесь не нужен, т. к. у заметки нет дополнительных
  # переменных экземпляра.

  # метод read_from_console спрашивает у пользователя текст заметки все строки
  # (до слова end) и записывает их в переменную экземпляра, массив @text.
  def read_from_console
    puts 'Новая заметка (все, что пишите до строчки "end"):'

    # Для старта цикла запишем в переменную line nil
    line = nil

    # Пока в переменной line не окажется (пока пользователь не введет) слово
    # «end», крутимся в цикле и считываем строку за строкой в массив @text.
    until line == 'end'
      # Читаем очередную строку и записываем из ввода пользователя
      line = STDIN.gets.chomp

      @text << line # записываем в массив @text то, что ввел пользователь
    end

    # Удалим последний элемент (слово "end") из массива @text
    @text.pop
  end

  # Метод to_string должен вернуть все строки, которые мы хотим записать в
  # файл при записи нашей заметки: помимо всех строк массива @text (тела
  # заметки) мы положим туда строку с датой создания заметки.
  def to_strings
    # Сгенерируем строку с датой создания заметки используя объект класса Time,
    # который у нас находится в переменной @created_at
    time_string = "Создано: #{@created_at.strftime('%Y.%m.%d, %H:%M:%S')}\n\r"

    # Возвращаем массив @text с добавление в начало (методом массива unshift)
    # строчки с датой создания заметки.
    @text.unshift(time_string)
  end
end
